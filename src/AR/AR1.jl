#TODO look at the file [AR1_test.jl](C:\Users\metivier\.julia\dev\PeriodicAutoRegressive\src\AR1_test.jl) as there is some unfinished updates in the code.
#TODO add tests using [ar1_temperature.jl](C:\Users\metivier\Dropbox\PC (2)\Documents\Simulations\SWG\article_swg\ar1_temperature.jl)
#? Not sure the type is needed + it causes issues with integer
abstract type AbstractPeriodicAR{T} end

@doc raw"""
AR(1) process with finite markov chain
The process follows
```math
    y_t = \mu + \rho y_{t-1} + \epsilon_t
```
where ``\epsilon_t \sim N (0, \sigma^2)``
##### Arguments
- `N::Integer`: Number of points in markov process
- `|œÅ::Real|<1` : Persistence parameter in AR(1) process
- `œÉ::Real` : Standard deviation of random component of AR(1) process
- `Œº::Real(0.0)` : Mean of AR(1) process

"""
struct AR1{T} <: AbstractPeriodicAR{T}
    Œº::T
    œÅ::T
    œÉ::T
end
# https://stackoverflow.com/questions/56714992/julia-multiple-dispatch-for-mutable-struct-items

function rand(AR::AR1, N::Integer; y‚ÇÅ=rand(Normal(0, AR.œÉ[1])))
    T = size(AR.Œº, 1)
    n2t = n_to_t(N, T)
    return rand(AR, n2t; y‚ÇÅ=y‚ÇÅ)
end

#TODO: add distribution into AR field
function rand(AR::AR1{<:AbstractVector}, n2t::AbstractVector{<:Integer}; y‚ÇÅ=rand(Normal(0, AR.œÉ[1])))
    N = length(n2t)
    y = zeros(eltype(y‚ÇÅ), N)
    y[1] = y‚ÇÅ
    for n = 2:N
        y[n] = AR.Œº[n2t[n]] + AR.œÅ[n2t[n]] * y[n-1] + rand(Normal(0, AR.œÉ[n2t[n]]))
    end
    return y
end

function rand(AR::AR1{<:AbstractMatrix}, n2t::AbstractVector{<:Integer}, z::AbstractVector{<:Integer}; y‚ÇÅ=rand(Normal(0, AR.œÉ[1])))
    N = length(n2t)
    œµ = randn(N)
    return rand(AR, œµ, n2t, z; y‚ÇÅ=y‚ÇÅ)
end

function rand(AR::AR1{<:AbstractMatrix}, œµ::AbstractVector, n2t::AbstractVector{<:Integer}, z::AbstractVector{<:Integer}; y‚ÇÅ=rand(Normal(0, AR.œÉ[1])))
    @assert length(z) == length(n2t)
    @assert length(z) == length(œµ) "got $(length(z)) == $(length(œµ))"
    N = length(n2t)
    y = zeros(eltype(y‚ÇÅ), N)
    y[1] = y‚ÇÅ
    for n = 2:N
        y[n] = AR.Œº[z[n], n2t[n]] + AR.œÅ[z[n], n2t[n]] * y[n-1] + AR.œÉ[z[n], n2t[n]]*œµ[n]
    end
    return y
end

# function rand2(ARs::AbstractArray{T}, n2t::AbstractVector{<:Integer}, z::AbstractVector{<:Integer}, Œ£; y‚ÇÅ=[AR.œÉ[1] for AR in ARs].*rand(MvNormal(Œ£[1]))) where T<:AR1{<:AbstractMatrix}
#     @assert length(z) == length(n2t)
#     @assert size(ARs) == size(y‚ÇÅ)
#     N = length(n2t)
#     y = zeros(eltype(y‚ÇÅ), N, size(y‚ÇÅ)...)
#     œµ = similar(y‚ÇÅ)
#     y[1, :] .= y‚ÇÅ
#     for n = 2:N
#         k = z[n]
#         t‚Çô = n2t[n]
#         C = GaussianCopula(Œ£[k]) #! use cor2cov if you just have correlations matrix !!! (#? in practice does it make a difference?)
#         ùîá = SklarDist(C, tuple(fill(Normal(), length(ARs))...)) 
#         @views œµ .= rand(ùîá)
#         for j in eachindex(y‚ÇÅ)
#             y[n, j] = ARs[j].Œº[k, t‚Çô] + ARs[j].œÅ[k, t‚Çô] * y[n-1, j] + ARs[j].œÉ[k, t‚Çô] * œµ[j]
#         end
#     end
#     return y
# end

function rand(ARs::AbstractArray{T}, n2t::AbstractVector{<:Integer}, z::AbstractVector{<:Integer}, Œ£; y‚ÇÅ=[AR.œÉ[1] for AR in ARs].*rand(MvNormal(Œ£[1])), output_œµ = false) where T<:AR1{<:AbstractMatrix}
    @assert length(z) == length(n2t)
    @assert size(ARs) == size(y‚ÇÅ)
    N = length(n2t)
    œµ = similar(y‚ÇÅ, length(y‚ÇÅ), N)
    ùñÄ = tuple(fill(Normal(), length(ARs))...)
    for (k, Œ£‚Çñ) in enumerate(Œ£)
        N‚Çñ = findall(z .== k)
        C = GaussianCopula(Œ£‚Çñ) #! use cor2cov if you just have correlations matrix !!! (#? in practice does it make a difference?)
        ùîá = SklarDist(C, ùñÄ) 
        @views œµ[:,N‚Çñ] .= rand(ùîá, length(N‚Çñ))
    end
    # for n = 1:N
    #     k = z[n]
    #     C = GaussianCopula(Œ£[k]) #! use cor2cov if you just have correlations matrix !!! (#? in practice does it make a difference?)
    #     ùîá = SklarDist(C, ùñÄ) 
    #     @views œµ[:,n] .= rand(ùîá)
    # end
    y = rand(ARs, œµ, n2t, z, Œ£; y‚ÇÅ=y‚ÇÅ)
    return output_œµ ? (y, œµ) : y
end

function rand(ARs::AbstractArray{T}, œµ::AbstractMatrix, n2t::AbstractVector{<:Integer}, z::AbstractVector{<:Integer}, Œ£; y‚ÇÅ=[AR.œÉ[1] for AR in ARs].*rand(MvNormal(Œ£[1]))) where T<:AR1{<:AbstractMatrix}
    @assert length(z) == length(n2t)
    @assert size(ARs) == size(y‚ÇÅ)
    N = length(n2t)
    y = zeros(eltype(y‚ÇÅ), N, size(y‚ÇÅ)...)
    for (j, AR) in enumerate(ARs)
        @views y[:, j] = rand(AR, œµ[j, :], n2t, z, y‚ÇÅ = y‚ÇÅ[j])
    end
    return permutedims(y)
end

function model_for_loglikelihood_AR1(d::Integer, T::Integer; silence=true)

    model = Model(Ipopt.Optimizer)
    silence && set_silent(model)

    Œº, œÅ, œÉ = add_variables!(model, d, T)
    # println(model)
    # * Same initialization but will be changed later
    @NLparameter(model, N[t=1:T] == 1)
    @NLparameter(model, ‚àëy‚Çú¬≤[t=1:T] == 1)
    @NLparameter(model, ‚àëy‚Çú‚Çã‚ÇÅ¬≤[t=1:T] == 1)
    @NLparameter(model, ‚àëy‚Çúy‚Çú‚Çã‚ÇÅ[t=1:T] == 1)
    @NLparameter(model, ‚àëy‚Çú[t=1:T] == 1)
    @NLparameter(model, ‚àëy‚Çú‚Çã‚ÇÅ[t=1:T] == 1)

    @NLobjective(
        model, Max,
        -sum(
            (‚àëy‚Çú¬≤[t] / 2 + N[t] / 2 * Œº[t]^2 + ‚àëy‚Çú‚Çã‚ÇÅ¬≤[t] * œÅ[t]^2 / 2 - ‚àëy‚Çúy‚Çú‚Çã‚ÇÅ[t] * œÅ[t] - ‚àëy‚Çú[t] * Œº[t] + ‚àëy‚Çú‚Çã‚ÇÅ[t] * œÅ[t] * Œº[t]) / œÉ[t]^2
            +
            N[t] * log(œÉ[t])
            for t = 1:T)
    )

    # I don't know if it is the best but https://discourse.julialang.org/t/jump-updating-nlparameter-of-a-model-in-a-loop/35081/3
    model[:N] = N
    model[:‚àëy‚Çú¬≤] = ‚àëy‚Çú¬≤
    model[:‚àëy‚Çú‚Çã‚ÇÅ¬≤] = ‚àëy‚Çú‚Çã‚ÇÅ¬≤
    model[:‚àëy‚Çúy‚Çú‚Çã‚ÇÅ] = ‚àëy‚Çúy‚Çú‚Çã‚ÇÅ
    model[:‚àëy‚Çú] = ‚àëy‚Çú
    model[:‚àëy‚Çú‚Çã‚ÇÅ] = ‚àëy‚Çú‚Çã‚ÇÅ

    return model
end

"""
    initialvalue_optimize!(Œ∏_Œº::AbstractArray, Œ∏_œÅ::AbstractArray, Œ∏_œÉ::AbstractArray, model::Model, observable; warm_start=true)
Fit the JuMP `model` with intial states `Œ∏_Œº`, `Œ∏_œÅ` and `Œ∏_œÉ` and parameters observable (in my mind it should be a `Dict`).
In place modification of the parameters to the fitted values.

"""
function initialvalue_optimize!(Œ∏_Œº::AbstractArray, Œ∏_œÅ::AbstractArray, Œ∏_œÉ::AbstractArray, model::Model, observable; warm_start=true)

    Œº_jump = model[:Œº_jump]
    œÅ_jump = model[:œÅ_jump]
    œÉ_jump = model[:œÉ_jump]

    # * Set the parameters in the JuMP model *#
    #TODO maybe let eachindex(observable[:N]) to something more generic
    for t in eachindex(observable[:N])
        set_value(model[:N][t], observable[:N][t])
        set_value(model[:‚àëy‚Çú¬≤][t], observable[:‚àëy‚Çú¬≤][t])
        set_value(model[:‚àëy‚Çú‚Çã‚ÇÅ¬≤][t], observable[:‚àëy‚Çú‚Çã‚ÇÅ¬≤][t])
        set_value(model[:‚àëy‚Çúy‚Çú‚Çã‚ÇÅ][t], observable[:‚àëy‚Çúy‚Çú‚Çã‚ÇÅ][t])
        set_value(model[:‚àëy‚Çú][t], observable[:‚àëy‚Çú][t])
        set_value(model[:‚àëy‚Çú‚Çã‚ÇÅ][t], observable[:‚àëy‚Çú‚Çã‚ÇÅ][t])
    end

    if warm_start
        # * Set the initial conditions * #
        set_start_value.(Œº_jump, Œ∏_Œº[:])
        set_start_value.(œÅ_jump, Œ∏_œÅ[:])
        set_start_value.(œÉ_jump, Œ∏_œÉ[:])
    end

    optimize!(model)

    Œ∏_Œº[:] = value.(Œº_jump)
    Œ∏_œÅ[:] = value.(œÅ_jump)
    Œ∏_œÉ[:] = value.(œÉ_jump)
end

logfY‚ÇúY‚Çú‚Çã‚ÇÅ(y‚Çô, y‚Çô‚Çã‚ÇÅ, Œº, œÅ, œÉ) = -(y‚Çô - œÅ * y‚Çô‚Çã‚ÇÅ - Œº)^2 / (2 * œÉ^2) - log(œÉ)

model_for_loglikelihood_AR1_full(y::AbstractVector, d::Integer, T::Integer; kwargs...) = model_for_loglikelihood_AR1_full(y, d, T, n_to_t(length(y), T); kwargs...)
model_for_loglikelihood_AR1_full(y::AbstractVector, z::AbstractVector{<:Integer}, d::Integer, T::Integer; kwargs...) = model_for_loglikelihood_AR1_full(y, z, d, T, n_to_t(length(y), T); kwargs...)

function model_for_loglikelihood_AR1_full(y::AbstractVector, d::Integer, T::Integer, n2t::AbstractVector{<:Integer}; silence=true)

    model = Model(Ipopt.Optimizer)
    silence && set_silent(model)

    Œº, œÅ, œÉ = add_variables!(model, d, T)

    register(model, :logfY‚ÇúY‚Çú‚Çã‚ÇÅ, 5, logfY‚ÇúY‚Çú‚Çã‚ÇÅ; autodiff=true)

    @NLobjective(
        model, Max,
        sum(logfY‚ÇúY‚Çú‚Çã‚ÇÅ(y[n], y[n-1], Œº[n2t[n]], œÅ[n2t[n]], œÉ[n2t[n]])
            for n = 2:size(y, 1))
    )
    optimize!(model)

    return value.(model[:Œº_jump]), value.(model[:œÅ_jump]), value.(model[:œÉ_jump])
end

function model_for_loglikelihood_AR1_full(y::AbstractVector, z::AbstractVector{<:Integer}, d::Integer, T::Integer, n2t::AbstractVector{<:Integer}; silence=true)

    model = Model(Ipopt.Optimizer)
    silence && set_silent(model)

    K = maximum(z) # length(unique(z))

    @warn "K = $K. Keep in mind that if one category is not in z it will not be fitted"

    Œº, œÅ, œÉ = add_variables!(model, d, T, K)

    register(model, :logfY‚ÇúY‚Çú‚Çã‚ÇÅ, 5, logfY‚ÇúY‚Çú‚Çã‚ÇÅ; autodiff=true)

    @NLobjective(
        model, Max,
        sum(logfY‚ÇúY‚Çú‚Çã‚ÇÅ(y[n], y[n-1], Œº[n2t[n], z[n]], œÅ[n2t[n], z[n]], œÉ[n2t[n], z[n]])
            for n = 2:size(y, 1))
    )
    optimize!(model)

    return value.(model[:Œº_jump]), value.(model[:œÅ_jump]), value.(model[:œÉ_jump])
end

function add_variables!(model, d::Integer, T::Integer)
    f = 2œÄ / T
    cos_nj = [cos(f * j * t) for t = 1:T, j = 1:d]
    sin_nj = [sin(f * j * t) for t = 1:T, j = 1:d]
    trig = [[1; interleave2(cos_nj[t, :], sin_nj[t, :])] for t = 1:T]

    # * Polynomial Œº(t) = P(t), -‚àû<Œº<+‚àû * #
    @variable(model, Œº_jump[j=1:(2d+1)])
    Œº = [@NLexpression(model, sum(trig[t][j] * Œº_jump[j] for j = 1:(2d+1))) for t in 1:T]

    # * Polynomial œÅ(t) = 2/(1+exp(-P(t)) - 1, -1<œÅ<1 * #
    @variable(model, œÅ_jump[j=1:(2d+1)])
    œÅ = [@NLexpression(model, 2 / (1 + exp(-sum(trig[t][j] * œÅ_jump[j] for j = 1:(2d+1)))) - 1) for t in 1:T]

    # * Polynomial œÉ(t) = exp(P(t)), 0<œÉ<+‚àû * #
    @variable(model, œÉ_jump[j=1:(2d+1)])
    œÉ = [@NLexpression(model, exp(sum(trig[t][j] * œÉ_jump[j] for j = 1:(2d+1)))) for t in 1:T]
    return Œº, œÅ, œÉ
end

function add_variables!(model, d::Integer, T::Integer, K::Integer)
    f = 2œÄ / T
    cos_nj = [cos(f * j * t) for t = 1:T, j = 1:d]
    sin_nj = [sin(f * j * t) for t = 1:T, j = 1:d]
    trig = [[1; interleave2(cos_nj[t, :], sin_nj[t, :])] for t = 1:T]

    # * Polynomial Œº(t) = P(t), -‚àû<Œº<+‚àû * #
    @variable(model, Œº_jump[j=1:(2d+1)])
    Œº = [@NLexpression(model, sum(trig[t][j] * Œº_jump[j, k] for j = 1:(2d+1))) for t in 1:T, k in 1:K]

    # * Polynomial œÅ(t) = 2/(1+exp(-P(t)) - 1, -1<œÅ<1 * #
    @variable(model, œÅ_jump[j=1:(2d+1)])
    œÅ = [@NLexpression(model, 2 / (1 + exp(-sum(trig[t][j] * œÅ_jump[j, k] for j = 1:(2d+1)))) - 1) for t in 1:T, k in 1:K]

    # * Polynomial œÉ(t) = exp(P(t)), 0<œÉ<+‚àû * #
    @variable(model, œÉ_jump[j=1:(2d+1)])
    œÉ = [@NLexpression(model, exp(sum(trig[t][j] * œÉ_jump[j, k] for j = 1:(2d+1)))) for t in 1:T, k in 1:K]
    return Œº, œÅ, œÉ
end